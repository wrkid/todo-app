{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nexport default function Timer({\n  id,\n  secondsToDo,\n  isPlayed\n}) {\n  _s();\n  const [secondsLeft, setSecondsLeft] = useState(null);\n  const [isGoing, setIsGoing] = useState(null);\n  useEffect(() => {\n    if (secondsToDo) {\n      const lastTime = localStorage.getItem(id.toString());\n      if (lastTime) {\n        const last = new Date(lastTime);\n        const now = new Date();\n        const toGo = secondsToDo - Math.floor((now.getTime() - last.getTime()) / 1000);\n        localStorage.removeItem(id.toString());\n        if (toGo > 0 && isPlayed) {\n          setSecondsLeft(toGo);\n        } else {\n          setSecondsLeft(secondsToDo);\n        }\n      } else {\n        setSecondsLeft(secondsToDo);\n      }\n      if (isPlayed) this.interval = setInterval(this.updateTimer, 1000);\n    }\n    return () => {\n      if (secondsLeft > 0) {\n        localStorage.setItem(id, new Date());\n      }\n      const {\n        isGoing\n      } = this.state;\n      timerOnGo(id, secondsLeft, isGoing);\n      clearInterval(this.interval);\n    };\n  }, []);\n  const updateTimer = () => {\n    const newTime = secondsLeft - 1;\n    if (newTime === 0) {\n      clearInterval(this.interval);\n    }\n    setSecondsLeft(newTime);\n  };\n  const timerOnPause = () => {\n    timerOnGo(id, secondsLeft, false);\n    clearInterval(this.interval);\n  };\n  timerOnPlay = () => {\n    if (secondsToDo) {\n      this.setState({\n        secondsToDo,\n        isGoing: true\n      });\n      this.interval = setInterval(this.updateTimer, 1000);\n    }\n  };\n  const getTimeStr = () => {\n    const newMin = Math.floor(secondsLeft / 60);\n    const newSec = secondsLeft - newMin * 60;\n    return `${newMin}:${newSec}`;\n  };\n}\n\n// export default class Timer extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       secondsToDo: null,\n//       isGoing: null\n//     };\n//   }\n\n//   componentDidMount() {\n//     const { id, secondsToDo, isPlayed } = this.props;\n//     if (secondsToDo) {\n//       const lastTime = localStorage.getItem(id.toString());\n//       if (lastTime) {\n//         const last = new Date(lastTime);\n//         const now = new Date();\n//         const toGo = secondsToDo - Math.floor((now.getTime() - last.getTime()) / 1000);\n//         localStorage.removeItem(id.toString());\n//         if (toGo > 0 && isPlayed) {\n//           this.setState({\n//             secondsToDo: toGo,\n//           });\n//         } else {\n//           this.setState({\n//             secondsToDo,\n//           });\n//         }\n//       } else {\n//         this.setState({\n//           secondsToDo,\n//         });\n//       }\n//       if (isPlayed) this.interval = setInterval(this.updateTimer, 1000);\n//     }\n//   }\n\n// componentWillUnmount() {\n//   const { id, timerOnGo } = this.props;\n//   const { secondsToDo } = this.state;\n//   if (secondsToDo > 0) {\n//     localStorage.setItem(id, new Date());\n//   }\n//   const { isGoing } = this.state;\n//   timerOnGo(id, secondsToDo, isGoing);\n//   clearInterval(this.interval);\n// }\n\n// updateTimer = () => {\n//   const { secondsToDo } = this.state;\n//   const newTime = secondsToDo - 1;\n//   if (newTime === 0) {\n//     clearInterval(this.interval);\n//   }\n//   this.setState(() => ({\n//     secondsToDo: newTime,\n//   }));\n// };\n\n// timerOnPause = () => {\n//   const { id, timerOnGo } = this.props;\n//   const { secondsToDo } = this.state;\n//   timerOnGo(id, secondsToDo, false);\n//   clearInterval(this.interval);\n// };\n\n// timerOnPlay = () => {\n//   const { secondsToDo } = this.props;\n//   if (secondsToDo) {\n//     this.setState({\n//       secondsToDo,\n//       isGoing: true,\n//     });\n//     this.interval = setInterval(this.updateTimer, 1000);\n//   }\n// };\n\n// getTimeStr = () => {\n//   const { secondsToDo } = this.state;\n//   const newMin = Math.floor(secondsToDo / 60);\n//   const newSec = secondsToDo - newMin * 60;\n//   return `${newMin}:${newSec}`;\n// };\n\n// render() {\n//   const { secondsToDo } = this.props;\n// if (!secondsToDo) {\n//   return null;\n// }\n// const time = this.getTimeStr();\n\n// return (\n//   <span className=\"description\">\n//     <button\n//       aria-label=\"icon-play\"\n//       type=\"button\"\n//       className=\"icon icon-play\"\n//       onClick={this.timerOnPlay}\n//     />\n//     <button\n//       aria-label=\"icon stop\"\n//       type=\"button\"\n//       className=\"icon icon-pause\"\n//       onClick={this.timerOnPause}\n//     />\n//     {time}\n//   </span>\n// );\n//   }\n// }\n_s(Timer, \"BPN0aU6fnmkOp1EIFHCGPVLRvVo=\");\n_c = Timer;\nTimer.defaultProps = {\n  secondsToDo: 0\n};\nTimer.propTypes = {\n  id: PropTypes.string.isRequired,\n  secondsToDo: PropTypes.number,\n  isPlayed: PropTypes.bool.isRequired,\n  timerOnGo: PropTypes.func.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","Timer","id","secondsToDo","isPlayed","_s","secondsLeft","setSecondsLeft","isGoing","setIsGoing","lastTime","localStorage","getItem","toString","last","Date","now","toGo","Math","floor","getTime","removeItem","interval","setInterval","updateTimer","setItem","state","timerOnGo","clearInterval","newTime","timerOnPause","timerOnPlay","setState","getTimeStr","newMin","newSec","_c","defaultProps","propTypes","string","isRequired","number","bool","func","$RefreshReg$"],"sources":["/Users/w.k/Documents/git/todo-app/src/components/timer/timer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport default function Timer ({ id, secondsToDo, isPlayed }) {\n  const [ secondsLeft, setSecondsLeft ] = useState(null);\n  const [ isGoing, setIsGoing ] = useState(null);\n\n  useEffect(() => {\n    if (secondsToDo) {\n      const lastTime = localStorage.getItem(id.toString());\n      if (lastTime) {\n        const last = new Date(lastTime);\n        const now = new Date();\n        const toGo = secondsToDo - Math.floor((now.getTime() - last.getTime()) / 1000);\n        localStorage.removeItem(id.toString());\n        if (toGo > 0 && isPlayed) {\n          setSecondsLeft(toGo);\n        } else {\n          setSecondsLeft(secondsToDo);\n        }\n      } else {\n        setSecondsLeft(secondsToDo);\n      }\n      if (isPlayed) this.interval = setInterval(this.updateTimer, 1000);\n    }\n\n    return () => {\n      if (secondsLeft > 0) {\n        localStorage.setItem(id, new Date());\n      }\n      const { isGoing } = this.state;\n      timerOnGo(id, secondsLeft, isGoing);\n      clearInterval(this.interval);\n    }\n  }, [])\n\n\n  const updateTimer = () => {\n    const newTime = secondsLeft - 1;\n    if (newTime === 0) {\n      clearInterval(this.interval);\n    }\n    setSecondsLeft(newTime)\n  };\n\n  const timerOnPause = () => {\n    timerOnGo(id, secondsLeft, false);\n    clearInterval(this.interval);\n  };\n\n  timerOnPlay = () => {\n    if (secondsToDo) {\n      this.setState({\n        secondsToDo,\n        isGoing: true,\n      });\n      this.interval = setInterval(this.updateTimer, 1000);\n    }\n  };\n\n  const getTimeStr = () => {\n    const newMin = Math.floor(secondsLeft / 60);\n    const newSec = secondsLeft - newMin * 60;\n    return `${newMin}:${newSec}`;\n  };\n\n\n\n}\n\n// export default class Timer extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       secondsToDo: null,\n//       isGoing: null\n//     };\n//   }\n\n//   componentDidMount() {\n//     const { id, secondsToDo, isPlayed } = this.props;\n//     if (secondsToDo) {\n//       const lastTime = localStorage.getItem(id.toString());\n//       if (lastTime) {\n//         const last = new Date(lastTime);\n//         const now = new Date();\n//         const toGo = secondsToDo - Math.floor((now.getTime() - last.getTime()) / 1000);\n//         localStorage.removeItem(id.toString());\n//         if (toGo > 0 && isPlayed) {\n//           this.setState({\n//             secondsToDo: toGo,\n//           });\n//         } else {\n//           this.setState({\n//             secondsToDo,\n//           });\n//         }\n//       } else {\n//         this.setState({\n//           secondsToDo,\n//         });\n//       }\n//       if (isPlayed) this.interval = setInterval(this.updateTimer, 1000);\n//     }\n//   }\n\n  // componentWillUnmount() {\n  //   const { id, timerOnGo } = this.props;\n  //   const { secondsToDo } = this.state;\n  //   if (secondsToDo > 0) {\n  //     localStorage.setItem(id, new Date());\n  //   }\n  //   const { isGoing } = this.state;\n  //   timerOnGo(id, secondsToDo, isGoing);\n  //   clearInterval(this.interval);\n  // }\n\n  // updateTimer = () => {\n  //   const { secondsToDo } = this.state;\n  //   const newTime = secondsToDo - 1;\n  //   if (newTime === 0) {\n  //     clearInterval(this.interval);\n  //   }\n  //   this.setState(() => ({\n  //     secondsToDo: newTime,\n  //   }));\n  // };\n\n  // timerOnPause = () => {\n  //   const { id, timerOnGo } = this.props;\n  //   const { secondsToDo } = this.state;\n  //   timerOnGo(id, secondsToDo, false);\n  //   clearInterval(this.interval);\n  // };\n\n  // timerOnPlay = () => {\n  //   const { secondsToDo } = this.props;\n  //   if (secondsToDo) {\n  //     this.setState({\n  //       secondsToDo,\n  //       isGoing: true,\n  //     });\n  //     this.interval = setInterval(this.updateTimer, 1000);\n  //   }\n  // };\n\n  // getTimeStr = () => {\n  //   const { secondsToDo } = this.state;\n  //   const newMin = Math.floor(secondsToDo / 60);\n  //   const newSec = secondsToDo - newMin * 60;\n  //   return `${newMin}:${newSec}`;\n  // };\n\n  // render() {\n  //   const { secondsToDo } = this.props;\n    // if (!secondsToDo) {\n    //   return null;\n    // }\n    // const time = this.getTimeStr();\n\n    // return (\n    //   <span className=\"description\">\n    //     <button\n    //       aria-label=\"icon-play\"\n    //       type=\"button\"\n    //       className=\"icon icon-play\"\n    //       onClick={this.timerOnPlay}\n    //     />\n    //     <button\n    //       aria-label=\"icon stop\"\n    //       type=\"button\"\n    //       className=\"icon icon-pause\"\n    //       onClick={this.timerOnPause}\n    //     />\n    //     {time}\n    //   </span>\n    // );\n//   }\n// }\n\nTimer.defaultProps = {\n  secondsToDo: 0,\n};\nTimer.propTypes = {\n  id: PropTypes.string.isRequired,\n  secondsToDo: PropTypes.number,\n  isPlayed: PropTypes.bool.isRequired,\n  timerOnGo: PropTypes.func.isRequired,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}